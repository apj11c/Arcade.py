PyArcade Project Description
============================

Goal
====
To build a mini-arcade of 3-6 games, of varying levels of complexity.


Group Members - Contributions
=============================
Samuel Hapgood - Target Practice, Pac Man
Andrew Jernigan - Milapede, Space Adventure
Gabriel Siewert - Roulette, Blackjack


Libraries Used
==============
PyQt5, pygame, random, sys


Games Implemented
=================

Target Practice
===============
targetPractice.py
	Modules used:
		Circle.py, user created module
		os
		random
		pygame
	Other requirements:
		target_background.png needed to display background of game
	How to play:
		Easy difficulty, a circle is sent across the screen
		when the circle reaches the target, press the spacebar.
		The user has 4 lives, when all 4 lives are expended the 
		game is over. Lives are lost by pressing the spacebar when
		the circle is not over the target


Pac Man
=======
Node.py:
	Node.py contains all necessary data members for each possible decision point
	PacMan or a ghost could turn at. I like to think it acts sort of like a railway
	that keeps them from running through walls or doing undefined behavior.

Pacman.py
	Contains the event loop that displays PacMan its self and blits the map

Needed To Run:
	Node.py
	Pacman.py
	
	pacmanBackground.png
	pacman.png
	pacmanFood.png
	Clyde.png
	Blinky.png
	Pinky.png
	Inky.png
	
	***all files are in the repo***


Milapede
========
Milapede.py:
	Countains all data necessary for running game. Everything is defined in main.
	First time working with pygame, mainly used for testing the functionality of 
	movement and how pygame works.
How to play:
	Use the directional pad to move the "Milapede" around to eat food. The Malapede
	grows when it consumes a food object. Eat as much food in the given time limit to
	determine the score.
Needed To Run:
	Milapede.py


Space Adventure
===============
SpaceAdventure.py:
	Contains all code to run the program. Everythin is defined in main. Need 
	pictures to load background and objects properly.
How to play:
	Move space ship left and rigth (no wrapping) with the directional pad. 
	Astroids spawn randomly in front of the space ship. Space ship shoots a 
	single bullet at a time, passing through every astroid it hits, gaining 
	10 pts per astroid hit. Use the space bar to fire the bullet. Hit as many
	astroids as you can before the timer is up to generate the score.
Needed to run:
	background.png
	astroid.png
	spaceship.png
	SpaceAdventure.py


Roulette
========
- roulette wheel set-up: pockets numbered 0-36, with a 00 pocket as well

- specific order is as follows: 
	0-28-9-26-30-11-7-20-32-17-5-22-34-15-3-24-36-13-1-
	00-27-10-25-29-12-8-19-31-18-6-21-33-16-4-23-35-14-2
	
- the user will begin with $10,000 and can place bets
  (on 1, 2, 3, 4, 5, or 6 numbers, with  payouts of 35 to 1, 17 to 1, 11 to 1,
  8 to 1, 6 to 1, and 5 to 1, respectively

- the user can play until they lose all of their money or until
  they decide to quit

- at the end of the game, whether they lost or won will be displayed
    - ending with more than $10,000 is a win, less than $10,000 is a loss


Blackjack
=========
- "hit" (accept another card) and "stand" (do not accept another card)
  are the only options as this is a more casual game of blackjack
  rather than one you would find in a casino

- no betting, just keeps track of wins/losses/ties
- only one opponent: the dealer
- user can continue playing rounds until they quit
- played with one deck of cards

- numeric cards (2-10) are worth their number
- face cards are worth 10
- aces are worth 1 or 11, whichever is most helpful

- if the player's hand exceeds 21, it is a loss
- elif the dealer's hand exceeds 21, it is a win
- elif the player's hand is less than the dealer's hand, it is a loss
- elif the player's hand is greater than the dealer's hand, it is a win
- else it is a tie

- Source of playing card images: http://acbl.mybigcommerce.com/52-playing-cards/
